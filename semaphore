#include<stdio.h>
#include<pthread.h>
#include<semaphore.h>
#include<unistd.h>

sem_t semaphore;
void*print(void*arg)
{
    printf("thread %d waiting to enter critical section\n",*((int*)arg));
   sem_wait(&semaphore);
   sleep(2);
   printf("entered in critical section thread id %d\n",*((int*)arg));
   sem_post(&semaphore);
   sleep(1);
   printf("exiting from critical section thread id %d\n",*((int*)arg));
}

int main()
{
   pthread_t thread[5];
   int thread_id[5];

   sem_init(&semaphore,0,2);

   for(int i=0;i<5;i++)
   {
    thread_id[i]=i;
     if(pthread_create(&thread[i],NULL,print,(void*)&thread_id[i])!=0)
     {
        printf("thread_creation failed\n");
        return 1;
     }
   }

   for(int i=0;i<5;i++)
   {
    pthread_join(thread[i],NULL);

   }
   sem_destroy(&semaphore);
}
