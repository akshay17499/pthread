#include<stdio.h>
#include<pthread.h>
#include<semaphore.h>
#include<unistd.h>

#define BUFFER 5

pthread_mutex_t mutex;
sem_t full;
sem_t empty;
int product[BUFFER];

void*production(void*arg)
{
   for(int i=0;i<10;i++)
   {
      sem_wait(&empty);
      pthread_mutex_lock(&mutex);
      int index = i%BUFFER;
      product[index] = i+1;
      printf("produced %d and stored in %d of buffer\n",product[index],index);
      pthread_mutex_unlock(&mutex);
      sem_post(&full);
      sleep(2);
   }
}

void*consumer(void*arg)
{
   for(int i=0;i<10;i++)
   {
      sem_wait(&full);
      sleep(1);
      pthread_mutex_lock(&mutex);
      int index = i%BUFFER;
      printf("consumed %d stored at buffer loction %d\n",product[index],index);
      pthread_mutex_unlock(&mutex);
      sem_post(&empty);
      sleep(2);
   }
}


int main()
{
  pthread_t thread_pro,thread_con;
  pthread_mutex_init(&mutex,NULL);

  sem_init(&full,0,0);
  sem_init(&empty,0,BUFFER);

  pthread_create(&thread_pro,NULL,production,NULL);
  pthread_create(&thread_con,NULL,consumer,NULL);

  pthread_join(thread_pro,NULL);

  pthread_join(thread_con,NULL);

  sem_destroy(&empty);
  sem_destroy(&full);
  return 0;
}
